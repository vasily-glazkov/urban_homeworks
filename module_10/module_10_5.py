"""
Задача "Многопроцессное считывание":
Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.

Подготовка:
Скачайте архив (https://drive.google.com/file/d/1YqBBelk2Pedfrg9GyXTGYvpa8Qb5CNd6/view) с файлами для считывания данных
и распакуйте его в проект для дальнейшего использования.

Выполнение:
Создайте функцию read_info(name), где name - название файла. Функция должна:
Создавать локальный список all_data.
Открывать файл name для чтения.
Считывать информацию построчно (readline), пока считанная строка не окажется пустой.
Во время считывания добавлять каждую строку в список all_data.
Этих операций достаточно, чтобы рассмотреть преимущество многопроцессного выполнения программы над линейным.
Создайте список названий файлов в соответствии с названиями файлов архива.
Вызовите функцию read_info для каждого файла по очереди (линейно) и измерьте время выполнения и выведите его в консоль.
Вызовите функцию read_info для каждого файла, используя многопроцессный подход: контекстный менеджер with и объект Pool.
Для вызова функции используйте метод map, передав в него функцию read_info и список названий файлов.
Измерьте время выполнения и выведите его в консоль.
Для избежания некорректного вывода запускайте линейный вызов и многопроцессный по отдельности,
предварительно закомментировав другой.

Пример результата выполнения программы:
Выполняемый код:
def read_info(name):
...
filenames = [f'./file {number}.txt' for number in range(1, 5)]

# Линейный вызов

# Многопроцессный

Вывод на консоль, 2 запуска (результаты могут отличаться):
0:00:03.046163 (линейный)
0:00:01.092300 (многопроцессный)

Примечания:
Используйте конструкцию if __name__ == '__main__' при многопроссном подходе.
Выводить или возвращать список all_data в функции не нужно. Можете сделать это,
но кол-во информации в файлах достигает - 10^9 строк.
"""
from multiprocessing import Pool
from datetime import datetime

filenames = [f'./files/file {number}.txt' for number in range(1, 5)]


def read_info(name):
    all_data = []
    with open(name, 'r') as file:
        while True:
            line = file.readline()
            if not line:
                break
            all_data.append(line)
    return None


def linear_reading(filenames):
    start = datetime.now()
    for filename in filenames:
        read_info(filename)
    end = datetime.now()
    print(f"Линейное выполнение заняло: {end - start}")


def multiprocess_reading(filenames):
    start = datetime.now()
    with Pool() as pool:
        pool.map(read_info, filenames)
    end = datetime.now()
    print(f"Многопроцессное выполнение заняло: {end - start}")


if __name__ == '__main__':
    linear_reading(filenames)  # 0:00:01.892663
    multiprocess_reading(filenames)  # 0:00:00.879173
